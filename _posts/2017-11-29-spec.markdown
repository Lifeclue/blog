---
layout: post
title: "제품 명세서"
date: "2017-11-29 23:09:19 +0900"
category: spring-integration-project
---

프로젝트 개발을 위해 프로젝트 명세서를 먼저 작성하려고 합니다. 명세서 작성은 여러모로 프로젝트 진행에 도움이 될 것입니다.
사실 저는 명세서 작성을 하지 않았던 사람 중의 한 명입니다. 회의 내용을 기반으로 프로그램을 작성하는 것이 습관이었지요.
그러던 중 [조엘 온 소프트웨어](https://books.google.co.kr/books?id=8pZjMgAACAAJ)라는 책을 읽게 되었습니다. 이 책을 보면 명세서를 반드시 작성하라고 주장하고 있으며 명세서를 작성하지 않는 사람을 심지어 다음과 같이 표현하기도 합니다.

>Programmers and software engineers who dive into code without writing a spec tend to think they’re cool gunslingers, shooting from the hip. They’re not. They are terribly unproductive. They write bad code and produce shoddy software, and they threaten their projects by taking giant risks which are completely uncalled for.  
[Painless Functional Specifications – Part 1: Why Bother?](https://www.joelonsoftware.com/2000/10/02/painless-functional-specifications-part-1-why-bother/)

조엘 온 소프트웨어의 온라인 번역본을 인용하면 (아래 스펙은 명세서를 말합니다.)
>스펙도 없이 코딩 작업에 뛰어드는 프로그래머나 소프트웨어 엔지니어들은 자신을 폼 나는 총잡이쯤으로 생각하는 경향이 있다. 허리춤에서 권총을 뽑자마자 바로 목표물을 명중시키는 총잡이. 하지만, 그들은 그런 명사수가 아니다. 아주 비생산적인 프로그래머일 뿐이다. 형편없는 코딩으로 조악한 소프트웨어를 만들어내고, 불필요한 위험을 자초하여 프로젝트를 위태롭게 만들 것이다.  
[손쉬운 기능 스펙 작성법 – 제 1부 : 왜 스펙이 필요한가?](http://korean.joelonsoftware.com/PainlessSpecs/1.html)

물론 위 주장이 진리는 아니겠지만 나름 고민하게 만드는 내용이었습니다. 그래서 명세서에 대해 스스로 고민을 해본 결과, 명세서가 있다면 프로젝트의 방향에 흔들림이 훨씬 적어질 것이고 제품에 일관성도 생길 것이라는 생각이 들었습니다.

# 명세서
이 명세서는 전적으로 제 주관으로 작성된 명세서입니다. 명세서 작성 지침서처럼 여기시면 안됩니다. 저도 명세서를 쓰는 것이 서툽니다. 아마 나중에 명세서 쓰는 것이 자연스러워지고 내용에 넣어야 할 것, 빼야할 것, 다르게 표현해야 할 것들이 경험으로 쌓이면 이 명세서도 수정되겠지요?

## 고객 정보 전달 서버
<dl>
<dt>작성자</dt>
<dd>Lifeclue</dd>
<dt>최종 버전</dt>
<dd>2017-11-29 18:40</dd>
</dl>

**이 문서는 초안입니다. 이 문서의 사항들은 언제든 바뀔 수 있는 상태입니다.**

### 시나리오
메가쇼퍼를 사랑하는 김클루는 메가쇼퍼에서 자신의 구매욕을 자극하는 제품을 많이 마주합니다.  
김클루는 특히 월급날만 되면 메가쇼퍼를 찾아 구매할 제품을 물색합니다.  
가끔 가입이 필요한 제품이 있어 스트레스를 받을 때도 있지만 강력한 메가쇼퍼의 추천 시스템 덕분에 주로 가입해놓은 쇼핑몰의 제품을 구매하게 되므로 불편하다고 생각하지는 않습니다.

### 기능 목표
이 서버는 다음과 같은 기능을 수행합니다.
- 사용자 식별 토큰 발급
- 사용자 정보 획득
- 사용자 정보를 제휴사에게 제공
- 사용자 가입 완료 통지 수신
- 접근 제어 (허용된 제휴사만 이 서버를 이용할 수 있음)

### 회피 목표
이 서버에서는 다음과 같은 기능은 개발하지 않습니다.
- 사용자 정보 추가 입력
- 제 3자 정보 제공 동의 여부 기록

### 기능의 흐름
- 제휴사와 동일한 사용자임을 확인하기 위한 식별값을 발급합니다.
- 발급한 식별값을 제휴사로 전달합니다.
- 제휴사는 전달받은 식별값으로 해당 식별값에 해당하는 사용자의 정보를 우리에게 요청합니다.
- 우리는 식별값에 해당하는 사용자 정보를 획득한 후 가공하여 제휴사에게 전달합니다.
- 제휴사에서 해당 사용자의 가입이 완료되면 식별값과 함께 가입 완료 통지를 하고 우리는 수신하여 처리합니다.

![]({{ "/assets/image/spring-integration-project/spring-integration-project-flow-chart.svg" | absolute_url }})

### 기능 상세
#### 식별값 (토큰)
기능의 흐름상 `메가쇼퍼`에서 쇼핑을 하던 사용자가 우리 서비스를 벗어나 `제휴사`의 서비스로 진입을 합니다. 이때 제휴사는 이 사용자의 정보를 요청하게 됩니다. 그러나 각자의 서비스가 다르므로 각 서비스의 입장에서 같은 사용자의 흐름인지 알 길이 없습니다. 이러한 흐름에서 사용자가 같은지를 식별하기 위해 먼저 사용자를 식별할 수 있는 `토큰`을 발급합니다. 이 `토큰`의 역할은 우리 서버와 제휴사 서버 간에 현재 동일한 사용자를 위해 통신하고 있다고 식별하는 것입니다.
```
[기술 노트]
이 식별값은 무차별 대입 공격(Brute Force)에 대응하기 위해  
문자와 숫자(혹은 더 복잡한 문자들)를 섞어서 만들기를 제안합니다.
그리고 토큰에 만료 시한을 설정하는 것도 고려해 볼만 합니다.
```

#### 식별값 전달
이 시점에 서비스 흐름이 전환됩니다. 이제부터는 제휴사의 서비스가 시작됩니다. 아마 제휴사의 가입 화면이 나올 것입니다.  
웹페이지 혹은 앱을 호출할텐데 이때 인자로 식별값을 전달합니다. 인자는 URL에 포함되기 때문에 쉽게 유추하거나 형태를 보고 다른 유효한 값을 만들어내지 못하는 형태로 만들어야 합니다.

#### 사용자 정보 제공
제휴사는 원하는 페이지(아마도 가입 화면)를 생성하기 전에 전달 받은 식별값으로 우리 서버에 사용자 정보를 요청하게 됩니다.(API) 우리 서버는 식별값이 유효한지 확인한 후 사용자 정보를 획득합니다. 획득한 정보는 가공하여 제휴사로 전달합니다.

#### 가입 완료 통지 수신
제휴사에서 사용자 가입이 완료되면 가입 완료 통지를 하게 됩니다.(API) 이때 식별값을 같이 전달해주므로 해당 사용자가 해당 제휴사에 가입을 완료했음을 기록합니다.
